{"_id":{"$oid":"5bba241da6f9273b5e101b04"},"content":"\u003ch1\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;记一次「随意」的照片赠送\u0026nbsp;\u003c/h1\u003e\u003cp\u003e发布时间：2018-04-08最近闲着无聊，整理了自己觉得还算看得过去的照片，特意挑出五张印刷了二十套。假模假式的拆掉四套照片，模仿着大神的方式做了下签名。因为人在合肥，就委托远在上海的群主代为分发，没有明确的接收者名单，也没有对群主提任何要求。不知道在看这篇文章的你有没有收到其中的照片呢！\u003cbr\u003e这篇文章的目的是对这五张照片做下简单的介绍，希望你能通过小剧的介绍了解照片背后的一些小故事。五张照片分别为一、杨浦五角场夜景iphone7拍摄五角场是小剧生活了五年的地方，这里承载了小剧在上海的全部回忆。\u003cbr\u003e这幅照片拍摄于2017年五四青年节，同时也是我的一个特殊的纪念日，在五角场吃饭的时候无意间隔着玻璃发现外面的景色很不错，举起手机便拍下了这幅画面，得益于lightroom在iphone7上支持raw格式，后期处理起来很得心应手。二、杨浦大桥夜景大疆Mavic拍摄17年，在做好准备要离开上海时，四处去拍摄一些自己感兴趣的画面，某个傍晚骑单车去了下上海杭州路，靠近黄浦江杨浦大桥的一处老居民区，原本计划使用大疆Mavic拍摄一组夜景，无奈当晚风力过大，12组照片只有这一组的画面是清晰的。\u003cbr\u003e三、崇明西沙湿地尼康D3000拍摄作为一个科三考了三遍的人来说，拿到驾照的心情自然是非常喜悦的。这次是自驾去崇明岛玩儿，正值秋冬交替的时节，可能也与树木的品种有关，东平森林公园和西沙湿地的树林都呈现红黄相映，临江的地方天空也特别干净多变，是一次蛮有收获的出行！\u0026nbsp;\u0026nbsp;\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","date":{"day":8,"month":4,"year":2018},"img":"https://goss1.vcg.com/creative/vcg/800/version23/VCG21400792797.jpg","prev":"最近闲着无聊，整理了自己觉得还算看得过去的照片，特意挑出五张印刷了二十套。假模假式的拆掉四套照片，模仿着大神的方式做了下签名。因为人在合肥，就委托远在上海的群主代为分发，没有明确的接收者名单，也没有对群主提任何要求。不知道在看这篇文章的你有没有收到其中的照片呢！","time":{"$numberLong":"1538901784430"},"title":"记一次「随意」的照片赠送"}
{"_id":{"$oid":"5bba241da6f9273b5e101b05"},"content":"\u003ch1\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;可视化布局模块开发分享\u003c/h1\u003e\u003cp\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;在历经两年多的迭代后，Odeon大数据平台在底层能力建设上已经相当丰满。最近大半年来在数据可视化方面也投入了很大的精力，目前自助 BI 产品也已经成功上线并稳定运行了一段时间，今天小剧就来分享下我们在数据可视化中的一些经验。 今天的分享主要围绕 可视化布局模块 的一些工作，布局模块是承载可视化图表的一块画布，是用户用来组织业务逻辑的重要手段之一。先来体验下 在线demo 或者看下面的效果图：\u003cbr\u003e\u003cbr\u003e其实不管是在数据可视化，还是在一些自助发布的运营平台，自助布局一直是一个难以跳过的问题。在项目开始之初这个问题也同样在困扰着我们，是我们开发几套预置模版让用户挑选，还是开发一套让用户可拖拽配置的布局模块？ 前者实现上非常简单，也很容易设计的非常精美，但是缺少了很多灵活性，很容易千篇一律。后者用户在使用上自由度非常高，可以拖拽出更符合自己预期的界面，但是开发成本相对较高，并且想要达到稳定、易用、高辅助性却比较难。 综合考虑上面的这些问题，我们对制定的几套方案均不满意，最终还是决定自己动手实现一个可以辅助用户进行拖拽布局的组件。\u0026nbsp;\u0026nbsp;\u003cimg src='https://timgsa.baidu.com/timg?image\u0026quality=80\u0026size=b9999_10000\u0026sec=1538744367560\u0026di=bc0b7f87cbb18e3e4cb31521f01497ca\u0026imgtype=0\u0026src=http%3A%2F%2Fimg3.duitang.com%2Fuploads%2Fitem%2F201512%2F14%2F20151214191914_2YE8z.jpeg'\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch1\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;可视化布局模块开发分享\u003c/h1\u003e\u003cp\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;在历经两年多的迭代后，Odeon大数据平台在底层能力建设上已经相当丰满。最近大半年来在数据可视化方面也投入了很大的精力，目前自助 BI 产品也已经成功上线并稳定运行了一段时间，今天小剧就来分享下我们在数据可视化中的一些经验。 今天的分享主要围绕 可视化布局模块 的一些工作，布局模块是承载可视化图表的一块画布，是用户用来组织业务逻辑的重要手段之一。先来体验下 在线demo 或者看下面的效果图：\u003cbr\u003e\u003cbr\u003e其实不管是在数据可视化，还是在一些自助发布的运营平台，自助布局一直是一个难以跳过的问题。在项目开始之初这个问题也同样在困扰着我们，是我们开发几套预置模版让用户挑选，还是开发一套让用户可拖拽配置的布局模块？ 前者实现上非常简单，也很容易设计的非常精美，但是缺少了很多灵活性，很容易千篇一律。后者用户在使用上自由度非常高，可以拖拽出更符合自己预期的界面，但是开发成本相对较高，并且想要达到稳定、易用、高辅助性却比较难。 综合考虑上面的这些问题，我们对制定的几套方案均不满意，最终还是决定自己动手实现一个可以辅助用户进行拖拽布局的组件。\u0026nbsp;\u0026nbsp;\u003cimg src='https://timgsa.baidu.com/timg?image\u0026quality=80\u0026size=b9999_10000\u0026sec=1538744367560\u0026di=bc0b7f87cbb18e3e4cb31521f01497ca\u0026imgtype=0\u0026src=http%3A%2F%2Fimg3.duitang.com%2Fuploads%2Fitem%2F201512%2F14%2F20151214191914_2YE8z.jpeg'\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch1\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;可视化布局模块开发分享\u003c/h1\u003e\u003cp\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;在历经两年多的迭代后，Odeon大数据平台在底层能力建设上已经相当丰满。最近大半年来在数据可视化方面也投入了很大的精力，目前自助 BI 产品也已经成功上线并稳定运行了一段时间，今天小剧就来分享下我们在数据可视化中的一些经验。 今天的分享主要围绕 可视化布局模块 的一些工作，布局模块是承载可视化图表的一块画布，是用户用来组织业务逻辑的重要手段之一。先来体验下 在线demo 或者看下面的效果图：\u003cbr\u003e\u003cbr\u003e其实不管是在数据可视化，还是在一些自助发布的运营平台，自助布局一直是一个难以跳过的问题。在项目开始之初这个问题也同样在困扰着我们，是我们开发几套预置模版让用户挑选，还是开发一套让用户可拖拽配置的布局模块？ 前者实现上非常简单，也很容易设计的非常精美，但是缺少了很多灵活性，很容易千篇一律。后者用户在使用上自由度非常高，可以拖拽出更符合自己预期的界面，但是开发成本相对较高，并且想要达到稳定、易用、高辅助性却比较难。 综合考虑上面的这些问题，我们对制定的几套方案均不满意，最终还是决定自己动手实现一个可以辅助用户进行拖拽布局的组件。\u0026nbsp;\u0026nbsp;\u003cimg src='https://timgsa.baidu.com/timg?image\u0026quality=80\u0026size=b9999_10000\u0026sec=1538744367560\u0026di=bc0b7f87cbb18e3e4cb31521f01497ca\u0026imgtype=0\u0026src=http%3A%2F%2Fimg3.duitang.com%2Fuploads%2Fitem%2F201512%2F14%2F20151214191914_2YE8z.jpeg'\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","date":{"day":5,"month":10,"year":2018},"img":"https://goss3.vcg.com/creative/vcg/800/version23/VCG21gic9742570.jpg","prev":"在历经两年多的迭代后，Odeon大数据平台在底层能力建设上已经相当丰满。最近大半年来在数据可视化方面也投入了很大的精力，目前自助 BI 产品也已经成功上线并稳定运行了一段时间，今天小剧就来分享下我们在数据可视化中的一些经验","time":{"$numberLong":"1538901784437"},"title":"可视化布局模块开发分享"}
{"_id":{"$oid":"5bba241da6f9273b5e101b06"},"content":"\u003ch1\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;移动手势的秘密\u0026nbsp;\u003c/h1\u003e\u003cp\u003e发布时间：2015-12-25本文是由某次部门内部分享整理而来，算是阶段性的个人总结。希望对你有所帮助。提到手势一般都会想到见面打招呼，交警指挥交通。还有平日里电脑、手机、PAD上随处可见的手势。那先来看几个例子。浏览器自定义鼠标手势。Mac触摸盘手势手机滑动解锁科幻电影中的虚拟操作（原谅我的脑洞）不管手势有多少种呈现方式，其实最终都是在帮助用户完成人机交互的其中一个环节。简单来说手势是一种输入方式、可以起到简化界面元素、增加交互趣味性的作用。当然在人和人交流时也有人人交互的作用，虽然不知道有没有这个词。你要说的手势用在哪儿？PC常见的输入设备有：鼠标、键盘、摄像头、话筒这么几种。移动端引入了更为丰富有用的陀螺仪和触摸屏幕。今天小剧打算分享的就是大家每天都要用到的触摸手势。手势在移动设备上是当之无愧的使用频次最高的交互了。同样先来看几个例子。左滑删除\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003c/p\u003e","date":{"day":25,"month":12,"year":2015},"img":"https://goss3.vcg.com/creative/vcg/800/version23/VCG21gic13464152.jpg","prev":"手势是帮助用户完成人机交互的其中一个环节，是一种高效的输入方式、可以起到简化界面元素、增加交互趣味性的作用。","time":{"$numberLong":"1538901584438"},"title":"移动手势的秘密"}
{"_id":{"$oid":"5bba241da6f9273b5e101b07"},"content":"\u003ch1\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;对象的自我销毁\u0026nbsp;\u003c/h1\u003e\u003cp\u003e发布时间：2015-12-07最近在某乎上回答了一个问题JavaScript里如何实现自定义对象的ondestroy方法？，回答与题主期望有所偏差但勉强可以作为一点个人经验分享出来。在日常的JS组件开发中，往往会有一些较为复杂的DOM操作及事件监听，尤其是在处理UI层面的widgets时候更为明显。常常会花很多精力在对象的init上，而当组件需要被移除时则仅仅是把所在DOM草草的remove掉就算完事儿。当然，绝大多数情况这样处理并没有什么不妥，因为事件监听时仅仅局限于所属的DOM自身，移除DOM后，只要对象的外部引用不再维系，相关的内存占用很快就会被当作垃圾回收掉（暂不讨论低版本IE内存回收的BUG）。其实个人在构建组件（对象）的时候是比较习惯于添加自定义方法destroy，用来手动销毁对象内部的一些引用。也就是小剧今天要说的仅靠移除DOM并不能达到销毁对象的几种情况。当你的组件出现下面几种情况时需要特别注意。一：DOM事件监听越界常规情况下，一个组件需要监听的仅仅是自身的DOM内的事件。偶尔也会有另一种情况，对象不得不操作自身之外的DOM。拿常见的瀑布流组件为例，除了自身事件，还要监听页面的滚动、浏览器尺寸重置等事件。因此当瀑布流组件需要被移除时，简单的移除自身DOM并不能完整销毁组件对页面的影响。下面是常规做法的例子：\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003c/p\u003e","date":{"day":5,"month":10,"year":2018},"img":"https://goss2.vcg.com/creative/vcg/800/version23/VCG21406647141.jpg","prev":"构建对象时添加自定义方法`destroy`，手动销毁对象内部的一些引用，用来弥补仅靠移除`DOM`并不能达到销毁对象的缺陷。","time":{"$numberLong":"1538901784438"},"title":"对象的自我销毁"}
{"_id":{"$oid":"5bba241da6f9273b5e101b08"},"content":"\u003ch1\u003e\u003ch1\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cspanstyle='font-weight:normal;'\u003e从零开始制作全景图\u0026nbsp;\u003c/span\u003e\u003c/h1\u003e\u003cp\u003e\u003cspanstyle='font-weight:normal;'\u003e发布时间：2017-01-082016年被称作VR产业元年，国内VR相关的创业项目也如雨后春笋般茁壮成长着。VR全景漫游作为整个VR中的领头军，在内容产出量上占据着比较大的比重。经过半个月摸索，小剧终于研究出如何拍摄、制作以及生成全景图，这里分享下这段时间研究的成果，供大家交流参考。制作全景图需要哪些步骤制作全景图其实很简单，只需要【前期拍摄】、【后期拼图】、【Web展示】这三步就够了，下面我来分别说一下在这三步分别要做哪些事情。一、前期拍摄前期拍摄很重要，因为全景照片需要的照片细节比较多，如果出现多张照片拍摄点不一致、或者照片素材不完整就就完蛋了，因为即使通过补拍也很难准确找到上次的拍摄点。另外因为天气的差异、时间的推移阳光也会发生变化从而影响画面的完整性。那么前期拍摄要注意哪些点呢？为了保证照片的完整融合需要定点拍摄，最好配合三脚架使用，可以使拍摄点更稳定。相邻画面要保证40%以上的重合点，有利于后期拼图时有更多可参考的像素细节。标准的拍摄流程是怎么样的？根据前面提到的定点拍摄和相邻画面40%的重合率，一般标准的全景拍摄方式为水平拍摄一圈、俯视45°拍摄一圈、仰视45°拍摄一圈，每圈平均拍摄8张，垂直向下俯视一张、垂直向上仰视一张，一共26张。当然，这里提到的仅仅是标准的全景图拍摄方式，有经验的话可以根据相机的不同可以适当的变通，初次拍摄推荐使用标准方法。\u003c/span\u003e\u003c/p\u003e\u003c/h1\u003e","date":{"day":5,"month":10,"year":2018},"img":"https://goss1.vcg.com/creative/vcg/800/version23/VCG21gic13494761.jpg","prev":"2016年被称作VR产业元年，VR全景漫游作为整个VR中的领头军，在内容产出量上占据着比较大的比重。经过半个月摸索，小剧终于研究出如何拍摄、制作以及生成全景图，这里分享下这段时间研究的成果，供大家交流参考。","time":{"$numberLong":"1538901784438"},"title":"从零开始制作全景图"}
{"_id":{"$oid":"5bba241da6f9273b5e101b09"},"content":"\u003ch1\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;一枚日历的成长史\u0026nbsp;\u003c/h1\u003e\u003cp\u003e发布时间：2015-10-15WEB开发中，常常会涉及到对日期的选择操作，日历控件的使用尤为频繁，今天小剧就来扒一扒如何一步步实现一枚日历。在说实现之前，先来看一看WEB中常见的日历形态。1、携程酒店预订2、新浪微博定时发送3、途牛旅游线路预订1、携程、新浪的例子可以叫做选择类的日历，算是日历中最常见的形态了。设置个人生日的时候、12306选择车票出行时间、预订酒店等场景下都会用得到。这类日历相对简单，使用时弹出，不用时隐藏，既不占用页面空间又能简单快捷的完成日期选择的功能。2、途牛这个例子展示信息比较丰满，相对来说更个性化一点儿。这类日历更偏向于展示行程安排、重要时间点及节假日标记等。将日历作为一个容器直观的呈现日期上的内容，便于规划日程安排。准备工作开始啦啰嗦了这些，再来回到日历自身。一个日历精简之后骨架是什么呢，实现一枚日历所需要完成的最小部分是什么？很显然，是渲染一个完整的月份，即按星期显示一个月的每一天。开工，现在就来动手实现单个月份的渲染。这里有几个关键点需要解决，先一一列出来：一个星期的第一天是周几？这里先使用周日，当然完成之后，试试能不能通过动点手脚改成可配置的；如何获取某月第一天是星期几，因为这牵涉到从何处开始渲染每一天（当然第一点也有关系）；怎样获取某月的长度，即一个月有多少天好啦，现在其实就只有两点需要解决。如何获取某月第一天是星期几?其实这个相对来说比较简单，只要将日期设置为对应年、月份、日期为第一天即可。functiongetFirstDayInMonth(year,month){//创建一个Date对象vardate=newDate();//设置年份为输入年份date.setFullYear(year);//设置月份（输入月份为自然月，即一月为1，Date中的月份是以0开始）date.setMonth(month-1);//设置日期date.setDate(1);//返回Date对象是周几returndate.getDay();}当然，上面步骤过于繁琐，简单点儿即可改为下面。functiongetFirstDayInMonth(year,month){returnnewDate(year,month-1,1).getDay();}好了，现在只要告诉我年、月，我就可以马上告诉你这个月第一天是星期几啦。怎样获取某月日期的长度？\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003c/p\u003e","date":{"day":15,"month":10,"year":2015},"img":"https://goss3.vcg.com/creative/vcg/800/version23/VCG21gic13423446.jpg","prev":"WEB开发中，常常会涉及到对日期的选择操作，日历控件的使用尤为频繁，今天小剧就来扒一扒如何一步步实现一枚日历。","time":{"$numberLong":"1538901584338"},"title":"一枚日历的成长史"}
{"_id":{"$oid":"5bba241da6f9273b5e101b0c"},"content":"\u003ch1\u003e\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;再见金华站\u0026nbsp;\u003c/h1\u003e\u003cp\u003e发布时间：2019-11-11\u003c/p\u003e\u003cp\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;其实这段视频在我喜欢上它之前我是看过的，我们班的才子David力荐的一部原创视频。当时看了感觉很平常，过了半年之后又一次看了下，才发现我竟然漏掉了整部微电影的亮点——最后一句女主角的【喜欢】。说实话，我正是因为点睛的这一句话我才喜欢这部微电影的。不管是因为青春的悸动还是每个经历高中洗礼过的人的共鸣，生活化的表演总是让我有种身为剧中之人的感觉。再提下最后渲染气氛的那段音乐，也是我很喜欢的轻音乐其中一首《theoriginofsilence》。关于视频就不多说了，相信你看过之后必定有所体会！\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","date":{"day":7,"month":10,"year":2018},"img":"https://goss.vcg.com/creative/vcg/800/version23/VCG21gic19582777.jpg","prev":"发布时间：2019-11-11","time":{"$numberLong":"1538901784478"},"title":"再见金华站"}
{"_id":{"$oid":"5bba241da6f9273b5e101b0d"},"content":"\u003ch1\u003e刘威来广州找工作\u003c/h1\u003e\u003cp\u003e应聘职位：市场，机械。\u003c/p\u003e\u003cp\u003e\u003cimg src='https://goss3.vcg.com/creative/vcg/800/version23/VCG21793745313.jpg' style='max-width:100%;'\u003e\u003cbr\u003e\u003c/p\u003e","date":{"day":7,"month":10,"year":2018},"img":"https://goss.vcg.com/creative/vcg/800/version23/VCG21gic19582777.jpg","prev":"应聘职位：市场，机械。","time":{"$numberLong":"1538901784568"},"title":"刘威来广州找工作"}
{"__v":0,"_id":{"$oid":"5bba4ca2af902b22742c1f8b"},"content":"\u003ch1\u003e\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 我卢本伟没有开挂！\u003c/h1\u003e\u003cp\u003e\u0026nbsp; \u0026nbsp; 干嘛啊，干嘛发666啊，我一直都这样的啊。\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src='https://timgsa.baidu.com/timg?image\u0026amp;quality=80\u0026amp;size=b9999_10000\u0026amp;sec=1538945614604\u0026amp;di=d21b545cd556467a3acdc7223a881843\u0026amp;imgtype=0\u0026amp;src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20170512%2Ffea8e551462d467c8869a873eb43f97f_th.jpg' style='max-width:100%;'\u003e\u003cbr\u003e\u003c/p\u003e","date":{"day":8,"month":10,"year":2018},"img":"https://timgsa.baidu.com/timg?image\u0026quality=80\u0026size=b9999_10000\u0026sec=1538945675328\u0026di=3b19c6dba77fad0217b0ee8e0fedba22\u0026imgtype=0\u0026src=http%3A%2F%2F00.imgmini.eastday.com%2Fmobile%2F20180109%2F20180109003117_3a363cbd3db049fce54d46f8ee33edc3_1.jpeg","prev":"    干嘛啊，干嘛发666啊，我一直都这样的啊。","time":1.538935970658e+12,"title":"我卢本伟没有开挂！"}
{"__v":0,"_id":{"$oid":"5bbc19f549c4c70ad89a74dd"},"content":"\u003ch1\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;URL结构分析\u0026nbsp;\u003c/h1\u003e\u003cp\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;小伙伴们可能很惊奇，小韩你个贰货\u003c/p\u003e\u003cp\u003e\u0026nbsp; \u0026nbsp; 我不是二货哈哈哈啊\u003cbr\u003e\u003c/p\u003e\u003cp\u003e为毛说URL这么简单的东西。其实还是有缘由的。一年半之前(2013年7月)小剧在写nodejs后端路由时，初次研究URL的结构，就感觉URL并没有想象中的简单；紧接着写前端路由lofox时，开始尝试拆分组合URL，发现浏览器处理URL的规则是如此简洁而丰富；最近（2015年一月）又在写基于传统页面的单页组件iframer时，对search、hash等URL的细枝末节做过不少处理的，深感URL是一个设计精妙的玩意儿。目前也算是和URL友好相gao处ji过相当长时间。URL由哪几部分组成？URL全称为统一资源定位器（UniformResoureLocator），其在b/s架构中起着桥梁作用。如上图标示，一个完整的URL主要由protocol、hostname、port、pathname、search、hash这六部分组成，下面小剧分别介绍这几个部分。protocol访问协议（也称之为方案）：它告诉浏览器如何处理将要打开的文件。web站点中最常用的模式是超文本传输协议http，其次为https协议。在URL中（http://xxx.xx/xx）协议的分隔符为//，匹配值包含:。hostname域名一般由英文字母和阿拉伯数字以及横'－'组成，最长可达67个字符（包括后缀），并且字母的大小写没有区别，每个层次最长不能超过22个字母。这些符号构成了域名的前缀，主体和后缀等几个部分，组合在一起构成一个完整的域名。当然，IP也可以充当domain的作用。port端口对应的是服务器当前应用正在监听的网络接口，浏览器默认值为80。分隔符为hostname后的:。\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","date":{"day":9,"month":10,"year":2018},"img":"https://goss.vcg.com/creative/vcg/800/version23/VCG21gic19582777.jpg","prev":"    小伙伴们可能很惊奇，小韩你个贰货","time":1.539054069789e+12,"title":"URL结构分析"}
{"__v":0,"_id":{"$oid":"5bbc3b3b49c4c70ad89a74e3"},"content":"\u003ch1\u003e关于Vue-router的hash模式和history模式\u003c/h1\u003e\u003cli\u003e发布于2018-10-9\u003c/li\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cspan style='color: rgb(123, 91, 161);'\u003e1、hash ：hash 虽然出现在 URL 中，但不会被包含在 http 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。\u003c/span\u003e\u003c/li\u003e\u003cli\u003e\u003cspan style='color: rgb(139, 170, 74);'\u003e2、history ：history 利用了 html5 history interface 中新增的 pushState() 和 replaceState() 方法。这两个方法应用于浏览器记录栈，在当前已有的 back、forward、go 基础之上，它们提供了对历史记录修改的功能。只是当它们执行修改时，虽然改变了当前的 URL ，但浏览器不会立即向后端发送请求。\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003cli\u003e\u003cbr\u003e\u003c/li\u003e\u003col\u003e\u003cli\u003e1、hash 模式的原理是 onhashchange 事件，可以在 window 对象上监听这个事件。\u003cbr\u003e\u003c/li\u003e\u003cli\u003e2、history ：hashchange 只能改变 # 后面的代码片段，history api （pushState、replaceState、go、back、forward） 则给了前端完全的自由，通过在window对象上监听popState()事件。\u003cpre\u003e\u003ccode\u003e\u003cbr\u003e// 设置状态\u003cbr\u003ehistory.pushState({color: 'red'}, 'red', 'red');\u003cbr\u003e\u003cbr\u003e// 监听状态\u003cbr\u003ewindow.onpopstate = function(event){\u003cbr\u003e    console.log(event.state);\u003cbr\u003e    if(event.state \u0026amp;\u0026amp; event.state.color === 'red'){\u003cbr\u003e        document.body.style.color = 'red';\u003cbr\u003e    }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// 改变状态\u003cbr\u003ehistory.back();\u003cbr\u003ehistory.forward();\u003cbr\u003e\u003cbr\u003e---------------------\u003c/code\u003e\u003c/pre\u003e我的理解：\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 浏览器中有一个history数组存放之前的页面的全部状态。如果没有这功能，那么一个页面跳到另一个页面，之前的就被销毁全部数据丢失，万一用户要是返回去，那就要重新请求，这样很不合理，既然下载了数据，为何不存放一段时间呢？靠着这个功能，用户体验也变好了。\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 而VUE-ROUTER的history功能，就是利用这个功能，但他是从一开始利用h5的新特性，history.pushState()来设置页面路由的状态，开始可能没有数据，但组件激活有了数据，存储在state数组，url改变只是各种go、forward、back操作而已了。（不会再发送get请求）\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","date":{"day":9,"month":10,"year":2018},"img":"https://goss1.vcg.com/creative/vcg/800/version23/VCG4188830738.jpg","prev":"发布于2018-10-9","time":1.539062587827e+12,"title":"关于Vue-router的hash模式和history模式"}
{"__v":0,"_id":{"$oid":"5bbc97cdf5c16320344d4e4b"},"content":"\u003ch1\u003e了解websocket\u003c/h1\u003e\u003cp\u003e学习并实践一下具备websocket的项目。\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","date":{"day":9,"month":10,"year":2018},"img":"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3676101495,1334434435\u0026fm=27\u0026gp=0.jpg","prev":"学习并实践一下具备websocket的项目。","time":1.539086285062e+12,"title":"了解websocket"}
{"__v":0,"_id":{"$oid":"5bbd7f206dab1e1bbca1205a"},"content":"\u003ch1\u003e路由懒加载和debug原则\u003c/h1\u003e\u003cp\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1、debug原则是首先解决第一条错误信息。\u003c/p\u003e\u003cp\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2、路由懒加载通过webpack代码分割和vue的异步组件。\u003c/p\u003e\u003cp\u003e异步组件：\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cp\u003econst Foo = () =\u0026gt; Promise.resolve({ /* 组件定义对象 */ })\u003c/p\u003e\u003cp\u003e关于代码分割就是webpack打包成多个js文件，按需加载。路由激活时才加载。\u003c/p\u003e\u003cp\u003e问题出在静态化，需要将dist文件夹静态化一下，不然找不到chunk。\u003c/p\u003e\u003c/code\u003e\u003c/pre\u003e","date":{"day":10,"month":10,"year":2018},"img":"https://timgsa.baidu.com/timg?image\u0026quality=80\u0026size=b9999_10000\u0026sec=1539155525368\u0026di=61bad3939b41345a443e984c3892631e\u0026imgtype=0\u0026src=http%3A%2F%2Fimgsrc.baidu.com%2Fforum%2Fw%3D580%2Fsign%3Dcc1a5315562c11dfded1bf2b53256255%2F6d579d4543a98226613fbfd18b82b9014890ebda.jpg","prev":"    1、debug原则是首先解决第一条错误信息。","time":1.53914550446e+12,"title":"路由懒加载和debug原则"}
{"__v":0,"_id":{"$oid":"5bbdbbe08fa6660680811204"},"content":"\u003ch1\u003e任务队列和Event Loop\u003c/h1\u003e\u003cp\u003e发布于2018-10-10\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;当stack空的时候，就会从任务队列中，取任务来执行。浏览器这边，共分3步：\u003c/p\u003e\u003cp\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;取一个宏任务来执行。执行完毕后，下一步。\u003c/p\u003e\u003col\u003e\u003cli\u003e取一个微任务来执行，执行完毕后，再取一个微任务来执行。直到微任务队列为空，执行下一步。\u003c/li\u003e\u003cli\u003e更新UI渲染。\u003c/li\u003e\u003cli\u003e另一种解释（同样是对的）：\u003c/li\u003e\u003cli\u003e\u003cdiv\u003e\u003cp\u003e\u003cspan style='background-color: rgb(28, 72, 127); color: rgb(238, 236, 224); font-size: medium;'\u003e（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style='background-color: rgb(28, 72, 127); color: rgb(238, 236, 224); font-size: medium;'\u003e（2）主线程之外，还存在一个'任务队列'（task queue）。只要异步任务有了运行结果，就在'任务队列'之中放置一个事件。\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style='background-color: rgb(28, 72, 127); color: rgb(238, 236, 224); font-size: medium;'\u003e（3）一旦'执行栈'中的所有同步任务执行完毕，系统就会读取'任务队列'，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style='background-color: rgb(28, 72, 127); color: rgb(238, 236, 224); font-size: medium;'\u003e（4）主线程不断重复上面的第三步。\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/li\u003e\u003cli\u003e理解为：首先是执行全局代码，产生一些微任务（），执行完全局代码后，再执行微任务。\u003c/li\u003e\u003cli\u003e接着stack空了，如果有宏任务，执行，再执行微任务，循环执行。\u003c/li\u003e\u003cli\u003e微任务：\n\n\u003cspan style='color: rgb(249, 150, 59);'\u003eprocess.nextTick, Promise, Object.observer, MutationObserver.\u003c/span\u003e\u003c/li\u003e\u003cli\u003e宏任务：\n\n\u003cspan style='color: rgb(249, 150, 59);'\u003escript（全局任务）, setTimeout, setInterval, setImmediate, I/O, UI rendering.\u003c/span\u003e\u003c/li\u003e\u003cli\u003e\u003cspan style='color: rgb(0, 0, 0);'\u003e关于常说的tick:tick指的是主线程和任务（不管是微还是宏）。\u003c/span\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u0026nbsp; \u0026nbsp; 题外话：\u003c/p\u003e\u003cp\u003e\u0026nbsp; \u0026nbsp; 之前做音乐APP时遇到一个问题，黄老师给出的解析中最后总结的非常好，在这里引用一下，也是强调了任何技术问题的解决都离不开“第一性原理”。\u003cbr\u003e\u003c/p\u003e\u003cp\u003e第一性原理：每个系统中存在一个最基本的命题，它不能被违背或删除。\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e以下是黄奕老师总结：\u003c/p\u003e\u003cdiv\u003e\u003cdiv\u003e\u0026nbsp; \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cspan style='font-family: 宋体; color: rgb(0, 0, 0);'\u003e通过记录我这一次发现问题——定位问题——解决问题的过程，我想给同学带来的思考不仅仅是这个问题本身，还有我们遇到问题后的一些态度。发现问题并不难，很多人在写代码中都会发现问题，那么发现问题后你的第一反应是尝试自己解决，还是去求助，我相信前者肯定更好。那么在解决之前需要定位问题，这里我要提到一个词，叫“面向巧合编程”，很多人遇到问题后会不断尝试这种办法，很可能某个办法就从表象上“解决”了这个问题，却不知道为什么，这种解决问题的方式是很不靠谱的，你可能并没有根本上解决问题，又可能解决了这个问题却又引发另一个问题。所以定位问题的本质就非常关键了，其实这是一个能力，一个好的工程师不仅会写代码，也要会查问题，能快速定位到问题的本质，是一个优秀的工程师的必要条件，这一点不容易，需要平时不断地的积累。在定位到问题的本质后，就要解决问题了，一道题往往有多解，但每种解法是否合理，这也是一个需要思考的过程，多和一些比你厉害的人交流，多积攒一些这方面的经验，这也是一个积累的过程。如果以后你再遇到问题，也用这样的态度去面对的问题，那么你也会很快的成长。\u003c/span\u003e\u003c/div\u003e\u003cbr\u003e\u003c/div\u003e\u003col\u003e\u003cli\u003e\u003cbr\u003e\u003c/li\u003e\u003c/ol\u003e","date":{"day":10,"month":10,"year":2018},"img":"https://goss2.vcg.com/creative/vcg/800/version23/VCG41545444880.jpg","prev":"发布于2018-10-10","time":1.539161056313e+12,"title":"任务队列和EventLoop"}
